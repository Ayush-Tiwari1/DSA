# Minimize Malware Spread

# Find by Path Compression
def Find(u,parent):
    if parent[u]==-1:
        return u
    parent[u]=Find(parent[u],parent)
    return parent[u]

# Union by Size
def Union(x,y,size,parent):
    if size[x]>=size[y]:
        parent[y]=x
        size[x]+=size[y]
    else:
        parent[x]=y
        size[y]+=size[x]



def MinMalwareSpread(graph,initial):
    n=len(graph)
    parent=[-1 for i in range(n)]
    size=[1 for i in range(n)]
    for i in range(n):
        for j in range(n):
            if i!=j and graph[i][j]==1:
                x=Find(i,parent)
                y=Find(j,parent)
                if x!=y:
                    Union(x,y,size,parent)
    infected=[0 for i in range(n)]
    for u in initial:
        par=Find(u,parent)
        infected[par]+=1
    ans=-1
    maxsize=-1
    mini=2**62
    for u in initial:
        par=Find(u,parent)
        mini=min(mini,u)
        if infected[par]==1:
            if size[par]>maxsize:
                ans=u
                maxsize=size[par]
            elif size[par]==maxsize:
                ans=min(ans,u)
    if ans==-1:
        return mini
    return ans


def main():
    n=int(input())
    graph=[]
    for i in range(n):
        graph.append(list(map(int,input().split())))
    k=int(input())
    initial=list(map(int,input().split()))
    ans=MinMalwareSpread(graph,initial)
    print(ans)



if __name__=='__main__':
    main()